{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onFocus","event","target","select","onBlur","updateStatus","ProfileInfo","profile","className","s","img","descriptionBlock","src","photos","large","alt","Preloader","Post","item","message","like","MyPosts","React","memo","postsElements","posts","reverse","map","p","likeCount","postBlock","MyNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","meAuthUserId","history","push","getUserProfileThunk","getStatusThunk","updateStatusThunk","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.47cc0721.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2amf-\",\"img\":\"ProfileInfo_img__2n8Ab\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__3oG22\",\"posts\":\"MyPosts_posts__3iWEj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2MzRF\"};","import React, { useEffect, useState } from \"react\";\r\n\r\n//Destructuring assignment - деструктурированное присваивание\r\n// let a, b, rest;\r\n//[a, b] = [10, 20]; //a = 10, b = 20\r\n//[a, b, ...rest] = [10, 20, 30, 40, 50]; // a = 10, b = 20, rest = [30, 40, 50]\r\n\r\n//let arr = [0, () = > {}]; // это справедливо для useState()\r\n//let [a, setA] = arr;\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n  //useState возвращает массив из 2-х элементов:\r\n  //1-й - значение, кот. хранится в state, 2-й - ф-ция, кот изменяет/устанавливает это одиночное значение\r\n  //let stateWithSetState = useState(false);\r\n  //let editMode = stateWithSetState[0]; // 1-й элемент\r\n  //let setEditMode = stateWithSetState[1]; //2-й элемент\r\n  // теперь запишем то же самое, но кратко:\r\n\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status); //инициализованное значение берем из props, а дальше значение будет то, которое мы будем сетать\r\n\r\n  //при помощи useEffect засинхронизируем наш статус с новым введенным значением и отрисовкой\r\n  //(сравним с предыдущими пропсами)\r\n\r\n  //В классовой компоненте это БЫЛО РЕАЛИЗОВАНО РАНЬШЕ ТАК:\r\n  // componentDidUpdate(prevProps, prevState) {\r\n  //   //prevProps - предыдущий пропс, prevState - предыдущий state (подсказки Реакта)\r\n  //   //внутри componentDidUpdate все setState должны быть\r\n  //   //ТОЛЬКО внутри какого-то условия, чтобы не было зацикливания\r\n  //   if (prevProps.status !== this.props.status) {\r\n  //     this.setState({\r\n  //       status: this.props.status,\r\n  //     });\r\n  //   }\r\n  // }\r\n\r\n  useEffect(() => {\r\n    //useEffect запускается после того, как все отрисуется и покажется на экране\r\n    setStatus(props.status);\r\n  }, [props.status]); //если не указать 2-й параметр (зависимость), useEffect будет выполняться после каждой отрисовки\r\n\r\n  const activatedEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  };\r\n\r\n  const onStatusChange = (e) => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n\r\n  const handleFocus = (event) => {\r\n    event.target.select();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!editMode && (\r\n        <div>\r\n          <span onDoubleClick={activatedEditMode}>\r\n            {status || \"Without status\"}\r\n          </span>\r\n        </div>\r\n      )}\r\n      {editMode && (\r\n        <div>\r\n          <input\r\n            onChange={onStatusChange}\r\n            autoFocus={true}\r\n            onFocus={handleFocus} //автовыделение содержимого инпута\r\n            onBlur={deactivateEditMode}\r\n            value={status}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from \"react\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\nconst ProfileInfo = ({ profile, status, updateStatus }) => {\r\n  //!props.profile - это все равно, что props.profile == null || props.profile (тип его) underfined\r\n  if (!profile) {\r\n    return <Preloader />;\r\n  }\r\n  return (\r\n    <div>\r\n      <div className={s.img}></div>\r\n      <div className={s.descriptionBlock}>\r\n        <img src={profile.photos.large} alt=\"\" />\r\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import React from \"react\";\r\nimport s from \"./Post.module.css\";\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img\r\n        src=\"https://saltway.in.ua/wp-content/uploads/2021/01/fotina-1200x992-1.jpg\"\r\n        alt=\"\"\r\n      />\r\n      {props.message}\r\n      <div>\r\n        <span>Like: </span>\r\n        {props.like}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { required, maxLengthCreator } from \"../../../utils/validators\";\r\nimport { Textarea } from \"../../common/FormsControl/FormsControl\";\r\n\r\n//React.memo внутри себя сравнивает новые пропсы и новый state с текущим состоянием\r\n// и только тогда отрисовыает компоненту, когда что-то изменилось\r\n//похож на shouldComponentUpdate в классовой компоненте\r\n\r\nconst MyPosts = React.memo((props) => {\r\n  //применим reverse, но не к props.posts, а к [...props.posts] - к копии объекта,\r\n  //чтобы ф-ция оставалась имьютабельной и не меняла сам стейт на глобальном уровне\r\n  let postsElements = [...props.posts]\r\n    .reverse()\r\n    .map((p) => <Post message={p.message} like={p.likeCount} />);\r\n\r\n  let addNewPost = (values) => {\r\n    props.addPost(values.newPostText);\r\n  };\r\n\r\n  return (\r\n    <div className={s.postBlock}>\r\n      <h3>My posts</h3>\r\n      <MyNewPostFormRedux onSubmit={addNewPost} />\r\n\r\n      <div className={s.posts}>New post</div>\r\n      {postsElements}\r\n    </div>\r\n  );\r\n});\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddMyNewPost = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field\r\n        component={Textarea}\r\n        name=\"newPostText\"\r\n        placeholder={\"Enter your post\"}\r\n        validate={[required, maxLength10]}\r\n      />\r\n\r\n      <div>\r\n        <button>Add post</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst MyNewPostFormRedux = reduxForm({ form: \"myNewPostForm\" })(AddMyNewPost);\r\n\r\nexport default MyPosts;\r\n","import { connect } from \"react-redux\";\r\nimport { addPostActionCreator } from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText,\r\n  };\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addPost: (newPostText) => {\r\n      dispatch(addPostActionCreator(newPostText));\r\n    },\r\n  };\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n  return (\r\n    <main>\r\n      <ProfileInfo\r\n        profile={props.profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n      />\r\n      <MyPostsContainer />\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getUserProfileThunk,\r\n  getStatusThunk,\r\n  updateStatusThunk,\r\n} from \"../../redux/profile-reducer\";\r\nimport { withRouter } from \"react-router\";\r\nimport { compose } from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n  componentDidMount() {\r\n    //match.params. - урок 60\r\n    //match.params. - значения из консоли, связанные с ф-цией withRouter - вытаскивает данные из url\r\n    let userId = this.props.match.params.userId;\r\n    if (!userId) {\r\n      //если не выбран профиль кого-то и мы авторизованы, то - наша аватарка (наш Profile, наш ID)\r\n      userId = this.props.meAuthUserId;\r\n      //есть такой программный метод редиректа для ознакомления применим его тут (вместо <Redirect />):\r\n      //если мы не авторизованы, то скачем (редирект) на страницу Логин\r\n      if (!userId) {\r\n        //запушим в history новый path - \"/login\" (программный редирект нужно делать как можно реже, он не связан со state, а любые изменения нужно стараться делать через state)\r\n        this.props.history.push(\"/login\");\r\n      }\r\n    }\r\n    this.props.getUserProfileThunk(userId);\r\n    this.props.getStatusThunk(userId);\r\n  }\r\n  render() {\r\n    //прокинем в компоненту props, раскукожим их (...) и прокинем дальше\r\n    return (\r\n      <Profile\r\n        {...this.props}\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatusThunk}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n  //к нам в пропсах придут пропсы, который мы здесь сейчас попросим\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  meAuthUserId: state.auth.userId,\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, {\r\n    getUserProfileThunk,\r\n    getStatusThunk,\r\n    updateStatusThunk,\r\n  }),\r\n  withRouter\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}